[{"/Users/andrewyusuf/movie-rating-sideproject/src/index.js":"1","/Users/andrewyusuf/movie-rating-sideproject/src/App.js":"2","/Users/andrewyusuf/movie-rating-sideproject/src/components/SignIn.js":"3","/Users/andrewyusuf/movie-rating-sideproject/src/firebase.js":"4","/Users/andrewyusuf/movie-rating-sideproject/src/components/Chat.js":"5","/Users/andrewyusuf/movie-rating-sideproject/src/components/SignOut.js":"6","/Users/andrewyusuf/movie-rating-sideproject/src/components/SendMessage.js":"7","/Users/andrewyusuf/movie-rating-sideproject/src/pages/Home.js":"8","/Users/andrewyusuf/movie-rating-sideproject/src/components/Navbar.js":"9","/Users/andrewyusuf/movie-rating-sideproject/src/pages/Login.js":"10","/Users/andrewyusuf/movie-rating-sideproject/src/pages/Profile.js":"11","/Users/andrewyusuf/movie-rating-sideproject/src/components/User.js":"12","/Users/andrewyusuf/movie-rating-sideproject/src/components/svg/Attachment.js":"13","/Users/andrewyusuf/movie-rating-sideproject/src/components/Message.js":"14","/Users/andrewyusuf/movie-rating-sideproject/src/components/PrivateRoute.js":"15","/Users/andrewyusuf/movie-rating-sideproject/src/context/auth.js":"16","/Users/andrewyusuf/movie-rating-sideproject/src/components/Searchbar.js":"17","/Users/andrewyusuf/movie-rating-sideproject/src/components/svg/Search.js":"18","/Users/andrewyusuf/movie-rating-sideproject/src/pages/SearchResults.js":"19","/Users/andrewyusuf/movie-rating-sideproject/src/pages/MovieDetail.js":"20","/Users/andrewyusuf/movie-rating-sideproject/src/pages/TvDetail.js":"21","/Users/andrewyusuf/movie-rating-sideproject/src/pages/MyRatings.js":"22","/Users/andrewyusuf/movie-rating-sideproject/src/pages/Messages.js":"23"},{"size":190,"mtime":1660099148673,"results":"24","hashOfConfig":"25"},{"size":1474,"mtime":1660699061424,"results":"26","hashOfConfig":"25"},{"size":1380,"mtime":1660245438913,"results":"27","hashOfConfig":"25"},{"size":628,"mtime":1660857763658,"results":"28","hashOfConfig":"25"},{"size":729,"mtime":1660099369109,"results":"29","hashOfConfig":"25"},{"size":251,"mtime":1660102484008,"results":"30","hashOfConfig":"25"},{"size":1332,"mtime":1660591343676,"results":"31","hashOfConfig":"25"},{"size":7821,"mtime":1660867524932,"results":"32","hashOfConfig":"25"},{"size":2690,"mtime":1660872444080,"results":"33","hashOfConfig":"25"},{"size":830,"mtime":1660245421662,"results":"34","hashOfConfig":"25"},{"size":878,"mtime":1660121346626,"results":"35","hashOfConfig":"25"},{"size":2035,"mtime":1660718098769,"results":"36","hashOfConfig":"25"},{"size":609,"mtime":1660165549047,"results":"37","hashOfConfig":"25"},{"size":1345,"mtime":1660852065880,"results":"38","hashOfConfig":"25"},{"size":229,"mtime":1660205145767,"results":"39","hashOfConfig":"25"},{"size":627,"mtime":1660255580116,"results":"40","hashOfConfig":"25"},{"size":1223,"mtime":1660368096691,"results":"41","hashOfConfig":"25"},{"size":688,"mtime":1660371898400,"results":"42","hashOfConfig":"25"},{"size":5370,"mtime":1660640334575,"results":"43","hashOfConfig":"25"},{"size":11036,"mtime":1660728562288,"results":"44","hashOfConfig":"25"},{"size":10940,"mtime":1660781755747,"results":"45","hashOfConfig":"25"},{"size":9484,"mtime":1660685982414,"results":"46","hashOfConfig":"25"},{"size":5577,"mtime":1660714262519,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},"1iinze2",{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"51"},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"51"},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"51"},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"51"},{"filePath":"116","messages":"117","suppressedMessages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"51"},{"filePath":"120","messages":"121","suppressedMessages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},"/Users/andrewyusuf/movie-rating-sideproject/src/index.js",[],[],[],"/Users/andrewyusuf/movie-rating-sideproject/src/App.js",[],[],"/Users/andrewyusuf/movie-rating-sideproject/src/components/SignIn.js",[],[],"/Users/andrewyusuf/movie-rating-sideproject/src/firebase.js",[],[],"/Users/andrewyusuf/movie-rating-sideproject/src/components/Chat.js",[],[],"/Users/andrewyusuf/movie-rating-sideproject/src/components/SignOut.js",[],[],"/Users/andrewyusuf/movie-rating-sideproject/src/components/SendMessage.js",[],[],"/Users/andrewyusuf/movie-rating-sideproject/src/pages/Home.js",["123","124"],[],"/Users/andrewyusuf/movie-rating-sideproject/src/components/Navbar.js",["125"],[],"/Users/andrewyusuf/movie-rating-sideproject/src/pages/Login.js",[],[],"/Users/andrewyusuf/movie-rating-sideproject/src/pages/Profile.js",[],[],"/Users/andrewyusuf/movie-rating-sideproject/src/components/User.js",["126"],[],"import React, {useEffect, useState} from 'react'\nimport styled from \"styled-components\"\nimport {onSnapshot, doc} from \"firebase/firestore\"\nimport {db, auth} from \"../firebase\"\n\n\nconst UserWrapper = styled.div`\n    border-bottom: 2px solid #000000;\n    padding: 10px;\n    cursor: pointer;\n\n    &:hover {\n        background-color: #778899;\n    }\n\n    &.selected {\n        background-color: #778899;\n    }\n`\n\nconst UserInfo = styled.div`\n    display: flex;\n    align-items: center;\n`\n\nconst LastMessageP = styled.p`\n  font-size: 14px;\n  white-space: nowrap;\n  width: 90%;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`\n\nconst LastMessageStrong = styled.strong`\n    margin-right: 7px;\n    margin-left: 10px;\n\n`\n\nconst UnreadMessage = styled.small`\n    margin-left: 10px;\n    background: #0084ff;\n    color: white;\n    padding: 2px 4px;\n    border-radius: 10px;\n`\n\n\n\nconst User = ({user, selectUser, chat}) => {\n    const user2 = user?.uid;\n    const user1 = auth.currentUser?.uid;\n    const [data, setData] = useState(''); // this will hold the last msg\n\n    useEffect(() => {\n        const id = user1 > user2 ? `${user1 + user2}` : `${user2 + user1}`;\n        let unsub = onSnapshot(doc(db, \"lastMessage\", id), (doc) => {\n            setData(doc.data());\n        })\n\n        return () => unsub();\n    }, [])\n\n\n  return (\n    <UserWrapper className={`${user.name === chat.name ? 'selected' : \"\"}`} onClick={() => selectUser(user)}>\n        <UserInfo>\n            <img width='50' height='50' style={{borderRadius: '50%'}} src={user.photoURL} alt=\"Profile pic\"/>\n            <p style={{marginLeft: '10px'}}>{user.name}</p>\n            {data?.from !== user1 && data?.unread && (\n                <UnreadMessage>~New~</UnreadMessage>\n            )}\n\n        </UserInfo>\n        {data && (\n            <LastMessageP className='truncate'>\n                <LastMessageStrong>{data.from === user1 ? \"Me: \" : null}</LastMessageStrong>\n                {data.text}\n            </LastMessageP>\n        )}\n    </UserWrapper>\n  )\n}\n\nexport default User","/Users/andrewyusuf/movie-rating-sideproject/src/components/svg/Attachment.js",[],[],"/Users/andrewyusuf/movie-rating-sideproject/src/components/Message.js",[],[],"/Users/andrewyusuf/movie-rating-sideproject/src/components/PrivateRoute.js",[],[],"/Users/andrewyusuf/movie-rating-sideproject/src/context/auth.js",[],[],"/Users/andrewyusuf/movie-rating-sideproject/src/components/Searchbar.js",[],[],"/Users/andrewyusuf/movie-rating-sideproject/src/components/svg/Search.js",[],[],"/Users/andrewyusuf/movie-rating-sideproject/src/pages/SearchResults.js",["127"],[],"import React, { useState, useEffect } from 'react'\nimport { useNavigate, useSearchParams } from 'react-router-dom';\nimport axios from \"axios\";\nimport styled from \"styled-components\";\nimport img from \"../NoMoviePoster.jpeg\";\nimport moment from 'moment';\n\nconst SearchResultsContainer = styled.div`\n    position: relative;\n    overflow: hidden;\n    height: calc(100vh - 70px);\n    overflow: auto;\n    justify-content: center;\n    display: flex;\n    // background-color: white;\n\n`\n\nconst TableSearchResults = styled.table`\n    padding: 10px;\n    width: 80vw;\n`\n\nconst TBodySearchResults = styled.tbody`\n    display: block;\n`\n\nconst TRowSearchResults = styled.tr`\n    display: flex;\n    height: 175px;\n    margin: 15px;\n    align-items: center;\n`\n\nconst H3Tag = styled.h3`\n    font-family: 'Fredoka One', cursive;\n    font-size: 20px;\n    \n    &:hover {\n        cursor: pointer;\n        text-decoration: underline;\n\n    }\n`\n\nconst PTagMovieInfo = styled.p`\n    font-size: 12px;\n    font-family: 'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif;\n`\n\nconst TDMoviePicture = styled.td`\n    height: 175px;\n    width: 125px;\n    box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.2), 0 2px 15px 0 rgba(0, 0, 0, 0.75);\n    cursor: pointer;\n\n`\n\n\nconst TDMovieInfo = styled.td`\n    //background: rgb(64,78,240);\n    // background: linear-gradient(342deg, rgba(64,78,240,1) 22%, rgba(189,85,247,1) 100%);\n    \n    background-color: #242124;\n    color: white;\n    display: block;\n    overflow-y: auto;\n    margin-left: 10px;\n    height: 140px;\n    padding: 5px 10px;\n    box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.1), 0 6px 15px 0 rgba(0, 0, 0, 0.75);\n    border: 1px solid gray;\n\n    &::-webkit-scrollbar {\n        display: none;\n    }\n\n\n`\n\n\nconst SearchResults = () => {\n    const [searchParams, setSearchParams] = useSearchParams();\n    const [results, setResults] = useState([]);\n    const API_KEY = \"9a637b178d3f0923dd00ef0550b24e90\";\n    const MOVIE_SEARCH_URL = \"https://api.themoviedb.org/3/search/multi?\"\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        const title = searchParams.get(\"title\");\n        console.log(title);\n        if (title) {\n            console.log(\"title exists: \" + title);\n            axios.get(MOVIE_SEARCH_URL + new URLSearchParams({api_key: API_KEY, query : title}))\n            .then((resp) => {\n                console.log(resp);\n                setResults(resp.data.results);\n\n\n            })\n            .catch(err => {console.log(err)})\n        }\n\n\n    }, [searchParams])\n\n    const TVShow = ({media}) => {\n        console.log(\"trying to render tv show\");\n        const image = media.poster_path ? 'https://image.tmdb.org/t/p/original/' + media.poster_path : img;\n\n        return (\n            <React.Fragment>\n                <TDMoviePicture style={{}} onClick={() => navigate(\"/tv/\" + media.id)}>\n                    <img style={{borderRadius: '3px'}} width=\"125\" height=\"175\" src={image} alt=\"No Movie Poster\"/>\n                </TDMoviePicture>\n                <TDMovieInfo style={{width: 'calc(80vw - 125px)', borderRadius: '10px'}}>\n                    <H3Tag onClick={() => navigate(\"/tv/\" + media.id)}>{media.name} \n                        <span style={{fontSize: '16px', fontStyle: 'italic', color: 'aqua'}}> (tv show)</span>\n                    </H3Tag>\n                    <h5>{moment(media.first_air_date, \"Y-M-D\").format(\"MMMM D, Y\")}  {media.vote_count !== 0 ? `|  Avg. Rating: ${media.vote_average}` : \"\" }</h5>\n                    <PTagMovieInfo>{media.overview}</PTagMovieInfo>\n                </TDMovieInfo>\n            </React.Fragment>\n\n        )\n    }\n\n    const Movie = ({media}) => {\n        const image = media.poster_path ? 'https://image.tmdb.org/t/p/original/' + media.poster_path : img;\n\n        return (\n            <React.Fragment>\n                <TDMoviePicture style={{}} onClick={() => navigate(\"/movie/\" + media.id)}>\n                    <img style={{borderRadius: '3px'}} width=\"125\" height=\"175\" src={image} alt=\"No Movie Poster\"/>\n                </TDMoviePicture>\n                <TDMovieInfo style={{width: 'calc(80vw - 125px)', borderRadius: '10px'}}>\n                    <H3Tag onClick={() => navigate(\"/movie/\" + media.id)}>{media.original_title}</H3Tag>\n                    <h5>{moment(media.release_date, \"Y-M-D\").format(\"MMMM D, Y\")}  {media.vote_count !== 0 ? `|  Avg. Rating: ${media.vote_average}` : \"\" }</h5>\n                    <PTagMovieInfo>{media.overview}</PTagMovieInfo>\n                </TDMovieInfo>\n            </React.Fragment>\n\n        )\n    }\n\n\n\n    const DisplaySearchResults = () => {\n        console.log(\"displaying search results...\");\n        return (\n            <TableSearchResults>\n                <TBodySearchResults>\n                    {results.map(media => (media.media_type !== \"person\" &&\n                        <TRowSearchResults key={media.id}>\n                            {media.media_type === \"tv\" ? <TVShow media={media}/> : <Movie media={media}/>}\n                        </TRowSearchResults>\n                    ))}\n                </TBodySearchResults>\n            </TableSearchResults>\n        )\n    }\n\n  return (\n    <SearchResultsContainer>\n        {results ? <DisplaySearchResults/> :\n        <p>No search results</p>\n        }\n    </SearchResultsContainer>\n  )\n}\n\nexport default SearchResults;\n\n","/Users/andrewyusuf/movie-rating-sideproject/src/pages/MovieDetail.js",["128","129","130"],[],"import React, { useEffect, useState } from 'react'\nimport { useParams } from 'react-router-dom'\nimport styled from \"styled-components\"\nimport axios from \"axios\"\nimport img from \"../NoMoviePoster.jpeg\";\nimport ReactStars from \"react-rating-stars-component\";\nimport moment from 'moment';\nimport {useForm} from \"react-hook-form\";\nimport {db, auth} from \"../firebase\"\nimport {serverTimestamp} from \"firebase/firestore\";\n// import Modal from \"react-modal\"\n\n\nconst MovieDetailContainer = styled.div`\n    position: relative;\n    height: calc(100vh - 70px);\n    justify-content: center;\n    align-items: center;\n    display: flex;\n`\n\nconst MovieDetailBackgroundDiv = styled.div`\n    width: 95vw;\n    height: 100%;\n    background-size: cover;\n`\n\nconst MovieDetailBlurDiv = styled.div `\n    width: 95vw;\n    height: 100%;\n    backdrop-filter: blur(0px) grayscale(0%);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n`\n\nconst MovieDetailInfoDiv = styled.div`\n    width: 1100px;\n    height: 500px;\n    display: grid;\n    grid-template-columns: 2fr 4fr;\n    border: 2px solid #000;\n    background:rgba(1,1,1,0.75);    // grey transparent background\n`\nconst MoviePosterandInfoDiv = styled.div`\n    // border: 1px solid #fff;\n    padding: 10px;\n    display: block;\n    text-align: center;\n    overflow: hidden;\n`\n\nconst MoviePosterImg = styled.img`\n    width: 250px;\n    height: 350px;\n    margin-top: 20px;\n`\n\nconst MovieInformation = styled.div`\n    display: block;\n    overflow: auto;\n    padding: 10px;\n    // border: 1px solid #fff;\n`\nconst RatingDiv = styled.div`\n    display: flex;\n`\n\nconst TextareaDiv = styled.div`\n    display: block;\n    margin-top: 1em;\n`\nconst TextareaMovieReview = styled.textarea`\n    width: 90%;\n    height: 150px;\n    padding: 10px;\n    border-radius: 7px;\n    font-family: 'Cabin', sans-serif;\n    font-size: 18px;\n    background:rgba(1,1,1,0.8);     \n    // color: black;\n    color: white;\n    \n    &:focus {\n        outline: none;\n    }\n`\nconst ShareButton = styled.button`\n    padding: 0;\n    width: 55px;\n    height: 30px;\n    margin-top: 6px;\n    margin-left: 12px;\n    border-radius: 7px;\n    border: none;\n    \n    &.clickable {\n        transition: all 0.2s ease;\n        background-color: #00FFFF;\n        cursor: pointer;\n\n        &:hover {\n        transform: scale(1.05);\n        background-color: #00BFFF;\n        }\n    }\n    &.disabled {\n        background-color: gray;\n    }\n`\n\nconst ButtonGroupDiv = styled.div`\n    width: 90%;\n    padding: 10px;\n    display: flex;\n    justify-content: right;\n`\n\nconst Button = styled.button`\n    padding: 0;\n    border-radius: 7px;\n    width: 60px;\n    height: 25px;\n    border: none;\n    margin-right: 8px;\n    transition: all 0.2s ease;\n    color: black;\n    font-family: 'Dosis', sans-serif;\n\n    &:hover {\n        transform: scale(1.05);\n        cursor: pointer;\n    }\n\n    &.save {\n        background-color: #00FA9A;\n\n    }\n\n    &.clear {\n        background-color: #C0C0C0;\n\n    }\n`\n\nconst H2RatingNumber = styled.h2`\n    margin: 12px 0 10px 10px;\n\n    &.ratingString {\n        margin: 16px 0 10px 10px;\n        font-size: 16px;\n\n\n    }\n\n`\n\nconst H3Tag = styled.h3`\n    font-family: 'Fredoka One', cursive;\n    font-size: 34px;\n    margin-top: 10px;\n    margin-bottom: 10px;\n`\n\nconst H4Tag = styled.h4`\n    font-style: italic;\n    color: white;\n`\n\n\n\nconst DisplayMovieDetail = ({movieDetail, rating, ratingChanged, review, setReview, handleSubmit, clearReview, saveReview}) => {\n    const image = movieDetail.poster_path ? 'https://image.tmdb.org/t/p/original/' + movieDetail.poster_path : img;\n    const backgroundImage =  movieDetail.backdrop_path ? 'https://image.tmdb.org/t/p/original/' + movieDetail.backdrop_path : \"\";\n\n    const shareRating = async () => {\n        await db.collection(\"posts\").doc(auth.currentUser.uid).collection(\"post\").add({\n            rating: rating,\n            title: movieDetail.original_title,\n            mediaPoster: movieDetail.poster_path ? 'https://image.tmdb.org/t/p/original/' + movieDetail.poster_path : img,\n            type: \"movie\",\n            mediaId: movieDetail.id,\n            name: auth.currentUser.displayName,\n            userUID: auth.currentUser.uid,\n            photoURL: auth.currentUser.photoURL,\n            createdAt: serverTimestamp(),\n        })\n        alert(\"post has been shared\");\n    };\n    \n    return (\n        <React.Fragment>\n            <MovieDetailBackgroundDiv style={{backgroundImage: `url(${backgroundImage})`}}>\n                <MovieDetailBlurDiv>\n                    <MovieDetailInfoDiv>\n                        <MoviePosterandInfoDiv>\n                            <MoviePosterImg style={{}} src={image} alt=\"No Movie Poster\"/>\n                            {movieDetail.release_date? <H4Tag style={{}}>{moment(movieDetail.release_date, \"Y-M-D\").format(\"MMMM D, Y\")}</H4Tag> : null}\n                            {movieDetail.tagline ? <p>{movieDetail.tagline}</p> : null}\n                        </MoviePosterandInfoDiv>\n                        <MovieInformation>\n                            <H3Tag>{movieDetail.original_title}</H3Tag>\n                            {movieDetail.genres.length ? (\n                            <p style={{fontStyle: 'italic', marginBottom: '5px', color: 'red'}}>\n\n                                {movieDetail.genres.map(genre => {return genre.name}).join(\", \")}\n                            </p>\n                            ) : null}\n                            {movieDetail.overview ? <p>{movieDetail.overview}</p> : null}\n                            <RatingDiv>\n                                <ReactStars\n                                key={`stars_${rating}`}\n                                value={Math.max(0, rating)}\n                                count={10}\n                                onChange={ratingChanged}\n                                size={30}\n                                isHalf={true}\n                                emptyIcon={<i className=\"far fa-star\"></i>}\n                                halfIcon={<i className=\"fa fa-star-half-alt\"></i>}\n                                fullIcon={<i className=\"fa fa-star\"></i>}\n                                activeColor=\"#98FB98\"\n                                />\n                                {rating ? <H2RatingNumber>{rating}</H2RatingNumber> : <H2RatingNumber className='ratingString'>No Rating Yet</H2RatingNumber>}\n                                <ShareButton onClick={shareRating} disabled={!rating} className={rating ? \"clickable\" : \"disabled\"}>share</ShareButton>\n                            </RatingDiv>\n                            <TextareaDiv>\n                                <h5 style={{margin: '0 0 5px 0'}}>Review: </h5>\n                                <TextareaMovieReview \n                                    // {...register(\"review\")}\n                                    spellCheck=\"false\"\n                                    id=\"textAreaReview\"\n                                    placeholder={'This movie sucks...? or?'}\n                                    type=\"text\"\n                                    value={review}\n                                    onChange={(e) => setReview(e.target.value)}\n                                ></TextareaMovieReview>\n                                <ButtonGroupDiv>\n                                    <Button className='clear' onClick={handleSubmit(clearReview)}>clear</Button>\n                                    <Button className='save' onClick={handleSubmit(saveReview)}>save</Button>\n                                </ButtonGroupDiv>\n                            </TextareaDiv>\n                            \n                        </MovieInformation>\n                \n                    </MovieDetailInfoDiv>\n                </MovieDetailBlurDiv>\n            </MovieDetailBackgroundDiv>\n        </React.Fragment>\n    )\n\n}\n\n\nconst MovieDetail = () => {\n    const movieId = useParams().id;\n    const API_KEY = \"9a637b178d3f0923dd00ef0550b24e90\";\n    const [movieDetail, setMovieDetail] = useState();\n\n    const [rating, setRating] = useState(0);\n    const [review, setReview] = useState(\"\");\n    const {register, getValues, handleSubmit} = useForm();\n\n\n    const MOVIE_DETAIL_URL = \"https://api.themoviedb.org/3/movie/\" + movieId + \n        \"?\" + new URLSearchParams({api_key: API_KEY});\n\n    const ratingChanged = (newRating) => {\n        console.log(newRating);\n        setRating(newRating);\n        db.collection(\"movies\").doc(auth.currentUser.uid).collection(\"reviews\").doc(movieId)\n            .set(\n            {   rating : newRating,\n                timestamp : serverTimestamp()\n            },\n            {merge : true})\n    };\n\n    const clearReview = () => {\n        console.log(\"clearing review\");\n        setReview(\"\");\n        console.log(review);\n        setRating(0);\n        document.getElementById(\"textAreaReview\").value = \"\";\n        \n        console.log(\"text area should be empty\");\n        db.collection(\"movies\").doc(auth.currentUser.uid).collection(\"reviews\").doc(movieId)\n            .delete();\n    }\n\n    const saveReview = () => {\n        if (review) {\n            db.collection(\"movies\").doc(auth.currentUser.uid).collection(\"reviews\").doc(movieId)\n            .set(\n            {   review : review,\n                timestamp : serverTimestamp()\n            },\n            {merge: true});\n            alert(\"review has been saved\");\n        }\n    }\n\n\n\n    useEffect(() => {\n        axios.get(MOVIE_DETAIL_URL)\n        .then(resp => {\n            console.log(resp.data);\n            setMovieDetail(resp.data);\n        })\n\n        db.collection(\"movies\").doc(auth.currentUser.uid).collection(\"reviews\").doc(movieId).get()\n            .then((docSnap) => {\n                const reviewDB = docSnap.get(\"review\");\n                if (reviewDB === undefined) {\n                    console.log(\"There was no saved review\");\n                } else {\n                    // put the post in the text area but check if it's undefined\n                    setReview(reviewDB);\n                    console.log(\"There was a saved review: \" + reviewDB);\n                }\n\n                // check if there is a rating\n                const movieRating = docSnap.get(\"rating\");\n                console.log(\"movieRating rating\", JSON.stringify(movieRating));\n                setRating(movieRating ? movieRating : 0);\n\n                \n            })\n            .catch((err) => {\n                console.log(err);\n                console.log(\"error trying to get document from firestore\")\n            })\n\n    }, []);\n\n\n  return (\n    <MovieDetailContainer>\n        {movieDetail ? <DisplayMovieDetail \n            movieDetail={movieDetail}\n            review={review}\n            setReview={setReview}\n            rating={rating} \n            handleSubmit={handleSubmit}\n            ratingChanged={ratingChanged}\n            clearReview={clearReview}\n            saveReview={saveReview}\n        /> \n        : <p>Movie Detail</p>}\n    </MovieDetailContainer>\n  )\n}\n\nexport default MovieDetail","/Users/andrewyusuf/movie-rating-sideproject/src/pages/TvDetail.js",["131"],[],"import React, { useEffect, useState } from 'react'\nimport moment from 'moment';\nimport axios from \"axios\";\nimport { useParams } from 'react-router-dom';\nimport styled from \"styled-components\";\nimport img from \"../NoMoviePoster.jpeg\";\nimport {db, auth} from \"../firebase\"\nimport { serverTimestamp } from 'firebase/firestore';\nimport ReactStars from \"react-rating-stars-component\";\n\n\n\nconst TvDetailContainer = styled.div`\n    position: relative;\n    height: calc(100vh - 70px);\n    justify-content: center;\n    align-items: center;\n    display: flex;\n`\n\nconst TvDetailBackgroundDiv = styled.div`\n    width: 95vw;\n    height: 100%;\n    background-size: cover;\n`\n\nconst TvDetailBlurDiv = styled.div `\n    width: 95vw;\n    height: 100%;\n    backdrop-filter: blur(0px) grayscale(0%);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n`\n\nconst TvDetailInfoDiv = styled.div`\n    width: 1100px;\n    height: 500px;\n    display: grid;\n    grid-template-columns: 2fr 4fr;\n    border: 2px solid #000;\n    background:rgba(1,1,1,0.75);    // grey transparent background\n`\nconst TvPosterandInfoDiv = styled.div`\n    // border: 1px solid #fff;\n    padding: 10px;\n    display: block;\n    text-align: center;\n    overflow: scroll;\n`\n\nconst TvPosterImg = styled.img`\n    width: 250px;\n    height: 350px;\n    margin-top: 10px;\n`\n\nconst TvInformation = styled.div`\n    display: block;\n    overflow: auto;\n    padding: 10px;\n    // border: 1px solid #fff;\n`\nconst RatingDiv = styled.div`\n    display: flex;\n`\nconst TextareaDiv = styled.div`\n    display: block;\n    margin-top: 1em;\n`\nconst TextareaTvReview = styled.textarea`\n    width: 90%;\n    height: 150px;\n    padding: 10px;\n    border-radius: 7px;\n    font-family: 'Cabin', sans-serif;\n    font-size: 18px;\n    background:rgba(1,1,1,0.8);     \n    // color: black;\n    color: white;\n    \n    &:focus {\n        outline: none;\n    }\n`\n\nconst ButtonGroupDiv = styled.div`\n    width: 90%;\n    padding: 10px;\n    display: flex;\n    justify-content: right;\n`\n\nconst Button = styled.button`\n    padding: 0;\n    border-radius: 7px;\n    width: 60px;\n    height: 25px;\n    border: none;\n    margin-right: 8px;\n    transition: all 0.2s ease;\n    color: black;\n    font-family: 'Dosis', sans-serif;\n\n    &:hover {\n        transform: scale(1.05);\n        cursor: pointer;\n    }\n\n    &.save {\n        background-color: #00FA9A;\n\n    }\n\n    &.clear {\n        background-color: #C0C0C0;\n\n    }\n`\n\nconst ShareButton = styled.button`\n    padding: 0;\n    width: 55px;\n    height: 30px;\n    margin-top: 6px;\n    margin-left: 12px;\n    border-radius: 7px;\n    border: none;\n    \n    &.clickable {\n        transition: all 0.2s ease;\n        background-color: #00FFFF;\n        cursor: pointer;\n\n        &:hover {\n        transform: scale(1.05);\n        background-color: #00BFFF;\n        }\n    }\n    &.disabled {\n        background-color: gray;\n    }\n`\n\nconst H2RatingNumber = styled.h2`\n    margin: 12px 0 10px 10px;\n\n    &.ratingString {\n        margin: 16px 0 10px 10px;\n        font-size: 16px;\n    }\n`\n\nconst H3Tag = styled.h3`\n    font-family: 'Fredoka One', cursive;\n    font-size: 34px;\n    margin-top: 10px;\n    margin-bottom: 10px;\n`\n\nconst H4Tag = styled.h4`\n    font-style: italic;\n    color: white;\n`\n\nconst DisplayTvDetail = ({TvDetail, rating, ratingChanged, review, setReview, clearReview, saveReview}) => {\n    const image = TvDetail.poster_path ? 'https://image.tmdb.org/t/p/original/' + TvDetail.poster_path : img;\n    const backgroundImage =  TvDetail.backdrop_path ? 'https://image.tmdb.org/t/p/original/' + TvDetail.backdrop_path : \"\";\n\n    const shareRating = async () => {\n        await db.collection(\"posts\").doc(auth.currentUser.uid).collection(\"post\").add({\n            rating: rating,\n            title: TvDetail.name,\n            mediaPoster: TvDetail.poster_path ? 'https://image.tmdb.org/t/p/original/' + TvDetail.poster_path : img,\n            type: \"tv\",\n            mediaId: TvDetail.id,\n            name: auth.currentUser.displayName,\n            userUID: auth.currentUser.uid,\n            photoURL: auth.currentUser.photoURL,\n            createdAt: serverTimestamp(),\n        })\n        alert(\"post has been shared\");\n    };\n\n\n    return (\n        <React.Fragment>\n            <TvDetailBackgroundDiv style={{backgroundImage: `url(${backgroundImage})`}}>\n                <TvDetailBlurDiv>\n                    <TvDetailInfoDiv>\n                        <TvPosterandInfoDiv>\n                            <TvPosterImg style={{}} src={image} alt=\"No TV Poster\"/>\n                            {TvDetail.first_air_date? <H4Tag style={{margin: '5px 0 0 0'}}>First Aired: {moment(TvDetail.first_air_date, \"Y-M-D\").format(\"MMMM D, Y\")}</H4Tag> : null}\n                            {TvDetail.last_air_date? \n                                <H4Tag style={{margin: '5px 0 0 0'}}>Last Aired: {moment(TvDetail.last_air_date, \"Y-M-D\").format(\"MMMM D, Y\")} ({TvDetail.status})</H4Tag> \n                                : null}\n                            {TvDetail.tagline ? <p>{TvDetail.tagline}</p> : null}\n                        </TvPosterandInfoDiv>\n                        <TvInformation>\n                            <H3Tag>{TvDetail.name}</H3Tag>\n                            {TvDetail.genres.length ? (\n                            <p style={{fontStyle: 'italic', marginBottom: '5px', color: 'red'}}>\n                                <span style={{fontSize: '16px', fontStyle: 'italic', color: 'aqua'}}> (tv show) </span>\n                                {TvDetail.genres.map(genre => {return genre.name}).join(\", \")}\n                            </p>\n                            ) : null}\n                            {TvDetail.overview ? <p>{TvDetail.overview}</p> : null}\n                            <RatingDiv>\n                                <ReactStars\n                                key={`stars_${rating}`}\n                                value={Math.max(0, rating)}\n                                count={10}\n                                onChange={ratingChanged}\n                                size={30}\n                                isHalf={true}\n                                emptyIcon={<i className=\"far fa-star\"></i>}\n                                halfIcon={<i className=\"fa fa-star-half-alt\"></i>}\n                                fullIcon={<i className=\"fa fa-star\"></i>}\n                                activeColor=\"#98FB98\"\n                                />\n                                {rating ? <H2RatingNumber>{rating}</H2RatingNumber> : <H2RatingNumber className='ratingString'>No Rating Yet</H2RatingNumber>}\n                                <ShareButton onClick={shareRating} disabled={!rating} className={rating ? \"clickable\" : \"disabled\"}>share</ShareButton>\n                            </RatingDiv>\n                            <TextareaDiv>\n                                <h5 style={{margin: '0 0 5px 0'}}>Review: </h5>\n                                <TextareaTvReview \n                                    // {...register(\"review\")}\n                                    spellCheck=\"false\"\n                                    id=\"textAreaReview\"\n                                    placeholder={'This tv show sucks...? or?'}\n                                    type=\"text\"\n                                    value={review}\n                                    onChange={(e) => setReview(e.target.value)}\n                                ></TextareaTvReview>\n                                <ButtonGroupDiv>\n                                    <Button className='clear' onClick={clearReview}>clear</Button>\n                                    <Button className='save' onClick={saveReview}>save</Button>\n                                </ButtonGroupDiv>\n                            </TextareaDiv>\n                            \n                        </TvInformation>\n                \n                    </TvDetailInfoDiv>\n                </TvDetailBlurDiv>\n            </TvDetailBackgroundDiv>\n        </React.Fragment>\n    )\n\n\n}\n\n    \nconst TvDetail = () => {\n\n    const TvId = useParams().id;\n    const API_KEY = \"9a637b178d3f0923dd00ef0550b24e90\";\n    const [TvDetail, setTvDetail] = useState();\n    const [rating, setRating] = useState(0);\n    const [review, setReview] = useState(\"\");\n\n    const TV_DETAIL_URL = \"https://api.themoviedb.org/3/tv/\" + TvId + \n        \"?\" + new URLSearchParams({api_key: API_KEY});\n\n\n    const ratingChanged = (newRating) => {\n        console.log(newRating);\n        setRating(newRating);\n        db.collection(\"tv\").doc(auth.currentUser.uid).collection(\"reviews\").doc(TvId)\n            .set(\n            {rating : newRating},\n            {merge : true})\n    };\n\n    const clearReview = () => {\n        console.log(\"clearing review\");\n        setReview(\"\");\n        console.log(review);\n        setRating(0);\n        document.getElementById(\"textAreaReview\").value = \"\";\n        \n        console.log(\"text area should be empty\");\n        db.collection(\"tv\").doc(auth.currentUser.uid).collection(\"reviews\").doc(TvId)\n            .delete();\n    }\n\n    const saveReview = () => {\n        if (review) {\n            db.collection(\"tv\").doc(auth.currentUser.uid).collection(\"reviews\").doc(TvId)\n            .set(\n            {   review : review,\n                timestamp : serverTimestamp()\n            },\n            {merge: true});\n            alert(\"review has been saved\");\n        }\n    }\n\n    useEffect(() => {\n        axios.get(TV_DETAIL_URL)\n        .then(resp => {\n            console.log(resp.data);\n            setTvDetail(resp.data);\n        })\n\n        db.collection(\"tv\").doc(auth.currentUser.uid).collection(\"reviews\").doc(TvId).get()\n            .then((docSnap) => {\n                const reviewDB = docSnap.get(\"review\");\n                if (reviewDB === undefined) {\n                    console.log(\"There was no saved review\");\n                } else {\n                    // put the post in the text area but check if it's undefined\n                    setReview(reviewDB);\n                    console.log(\"There was a saved review: \" + reviewDB);\n\n                    // check if there is a rating\n                    const tvRating = docSnap.get(\"rating\");\n                    console.log(\"tvRating rating\", JSON.stringify(tvRating));\n                    setRating(tvRating ? tvRating : 0);\n                }\n            })\n            .catch((err) => {\n                console.log(err);\n                console.log(\"error trying to get document from firestore\")\n            })\n\n    }, [])\n\n\n  return (\n    <TvDetailContainer>\n        {TvDetail ? <DisplayTvDetail \n            TvDetail={TvDetail}\n            review={review}\n            setReview={setReview}\n            rating={rating} \n            ratingChanged={ratingChanged}\n            clearReview={clearReview}\n            saveReview={saveReview}\n        /> \n        : <p>No TV Detail</p>}\n    </TvDetailContainer>\n  )\n}\n\nexport default TvDetail","/Users/andrewyusuf/movie-rating-sideproject/src/pages/MyRatings.js",["132","133","134","135"],[],"import React, { useEffect, useState } from 'react'\nimport {db, auth} from \"../firebase\"\nimport styled from \"styled-components\"\nimport axios from 'axios'\nimport img from \"../NoMoviePoster.jpeg\";\nimport ReactStars from \"react-rating-stars-component\";\nimport { useNavigate } from 'react-router-dom';\n\n\n\nconst RatingsScreenContainer = styled.div`\n    position: relative;\n    height: calc(100vh - 70px);\n    width: 100vw;\n    display: block;\n    text-align: center;\n    align-items: center;\n    overflow: hidden;\n`\n\nconst Image = styled.img`\n    border-radius: 3px;\n    width: 75px; \n    height: 125px;\n`\n\nconst RatingsContainer = styled.div`\n    position: relative;\n    display: flex;\n    justify-content: space-between;\n    height: calc(100vh - 225px);\n`\n\nconst MovieRatings = styled.div`\n    width: 30%;\n    height: 67vh;\n    overflow: hidden;\n    // border: 1px solid #fff;\n    display: block;\n    border-radius: 1rem;\n    justify-content: center;\n    margin-left: 10em;\n    // background-color: #191414;\n    background-color: #111;\n\n`\n\nconst TvRatings = styled.div`\n    width: 30%;\n    height: 67vh;\n    display: block;\n    border-radius: 1rem;\n    margin-right: 10em;\n    justify-content: center;\n    background-color: #111;\n\n`\n\nconst Table = styled.table`\n    width: 85%;\n    padding: 10px;\n    // border: 1px solid #fff;\n    border-radius: 7px;\n    margin-left: auto;\n    margin-right: auto;\n    // background:rgba(1,1,1,0.5);\n    background-color: #343434;\n`\n\nconst TBody = styled.tbody`\n    display: block;\n    overflow-y: auto;\n    max-height: calc(65vh - 85px);\n`\n\nconst TRow = styled.tr`\n    display: flex;\n    margin: 5px;\n    align-items: center;\n\n    &:hover {\n        cursor: pointer;\n        background-color: lightgray;\n    }\n`\n\nconst TDInfo = styled.td`\n    display: block;\n    text-align: left;\n    padding: 10px;\n`\n\nconst RatingDiv = styled.div`\n    display: flex;\n    align-items: center;\n`\n\nconst H3Tag = styled.h3`\n    margin-top: 2em;\n    font-size: 26px;\n`\n\nconst H4Tag = styled.h4`\n    margin-top: 1em;\n    font-size: 20px;\n    margin-bottom: 5px;\n    font-family: 'Dosis', sans-serif;\n`\n\nconst RatingNumberStrong = styled.strong`\n    margin-left: 7px;\n    margin-top: 4px;\n`\n\n\nconst MyRatings = () => {\n\n    const [movieRatings, setMovieRatings] = useState([]);\n    const [tvRatings, setTvRatings] = useState([]);\n    const [movieRatingsDict, setMovieRatingsDict] = useState({});\n    const [showRatingsDict, setShowRatingsDict] = useState({});\n\n    const navigate = useNavigate();\n\n    const API_KEY = \"9a637b178d3f0923dd00ef0550b24e90\";\n    const TV_DETAIL_URL = \"https://api.themoviedb.org/3/tv/\"; \n    const MOVIE_DETAIL_URL = \"https://api.themoviedb.org/3/movie/\"; \n    // + movieId + \n    //     \"?\" + new URLSearchParams({api_key: API_KEY});\n\n    \n    useEffect(() => {\n        const movieIds = []\n        const movies = [];\n        const showIds = [];\n        const shows = [];\n        let movieDict = {};\n        let showDict = {};\n\n\n        \n\n        const getMovies = async () => {\n            // get movies\n            const subscriber = await db.collection(\"movies\").doc(auth.currentUser.uid).collection(\"reviews\").orderBy(\"timestamp\", \"desc\").get()\n            .then((querySnap) => {\n                if (querySnap) {\n                    querySnap.forEach((docSnap) => {\n                        movieDict[docSnap.id] = docSnap.data().rating;\n                        movieIds.push(docSnap.id);\n                    });\n                    setMovieRatingsDict(movieDict);\n                }\n                console.log(\"movieDict: \" + JSON.stringify(movieDict));\n    \n                // iterate through the movieIds array and retrieve movie data and append to movies array\n                if (movieIds.length) {\n                    movieIds.map(movieId => {\n                        axios.get(MOVIE_DETAIL_URL + movieId + \"?\" + new URLSearchParams({api_key: API_KEY}))\n                        .then(resp => {\n                            // console.log(resp);\n                            movies.push(resp.data);\n                            setMovieRatings(movies);\n\n                        })\n                    })\n\n                }\n            }) \n            .catch(err => {console.log(err);})\n        }\n\n        const getTvShows = async () => {\n            // get tv shows\n            const sub = await db.collection(\"tv\").doc(auth.currentUser.uid).collection(\"reviews\").orderBy(\"timestamp\", \"desc\").get()\n            .then((querySnap) => {\n                if (querySnap) {\n                    querySnap.forEach((docSnap) => {\n                        // console.log(docSnap.data().rating);\n                        showDict[docSnap.id] = docSnap.data().rating;\n                        showIds.push(docSnap.id);\n                    });\n                    setShowRatingsDict(showDict);\n    \n                }\n                console.log(\"showDict: \" + JSON.stringify(showDict));\n    \n                // iterate through the movieIds array and retrieve movie data and append to movies array\n                if (showIds.length) {\n                    showIds.map(showId => {\n                        axios.get(TV_DETAIL_URL + showId + \"?\" + new URLSearchParams({api_key: API_KEY}))\n                        .then(resp => {\n                            // console.log(resp);\n                            shows.push(resp.data);\n                            setTvRatings(shows);\n                        })\n                    })\n                    \n                }\n            }) \n            .catch(err => {console.log(err);})\n    \n        }\n\n        getMovies();\n        getTvShows();\n        \n    }, [])\n\n  return (\n    <RatingsScreenContainer>\n        <H3Tag>My Ratings</H3Tag>\n        <RatingsContainer id='ratignsContainer'>\n            <MovieRatings>\n                <H4Tag>Movie Ratings</H4Tag>\n                <Table>\n                    <TBody>\n                        {movieRatings.length ? movieRatings?.map(movie => (\n                            <TRow onClick={() => navigate(\"/movie/\" + movie.id)} key={movie.id}>\n                                <td>\n                                    <Image src={movie.poster_path ? 'https://image.tmdb.org/t/p/original/' + movie.poster_path : img}/>\n                                </td>\n                                <TDInfo>\n                                    <H4Tag>{movie.title}</H4Tag>\n                                    <RatingDiv>\n                                        <ReactStars\n                                            value={movieRatingsDict[String(movie.id)]}\n                                            edit={false}\n                                            count={10}\n                                            size={15}\n                                            isHalf={true}\n                                            emptyIcon={<i className=\"far fa-star\"></i>}\n                                            halfIcon={<i className=\"fa fa-star-half-alt\"></i>}\n                                            fullIcon={<i className=\"fa fa-star\"></i>}\n                                            activeColor=\"#98FB98\"\n                                        />\n                                        <RatingNumberStrong>{movieRatingsDict[String(movie.id)]}</RatingNumberStrong>\n                                    </RatingDiv>\n                                    \n                                </TDInfo>\n                            </TRow>\n                        )) : null}\n                    </TBody>\n                </Table>\n            </MovieRatings>\n            <TvRatings>\n                <H4Tag>TV Show Ratings</H4Tag>\n                <Table>\n                    <TBody>\n                        {tvRatings.length ? tvRatings.map(tvshow => (\n                            <TRow onClick={() => navigate(\"/tv/\" + tvshow.id)} key={tvshow.id}>\n                                <td>\n                                    <Image src={tvshow.poster_path ? 'https://image.tmdb.org/t/p/original/' + tvshow.poster_path : img}/>\n                                </td>\n                                <TDInfo>\n                                    <H4Tag>{tvshow.name}</H4Tag>\n                                    <RatingDiv>\n                                        <ReactStars\n                                            // key={`stars_${rating}`}\n                                            value={showRatingsDict[String(tvshow.id)]}\n                                            edit={false}\n                                            count={10}\n                                            size={15}\n                                            isHalf={true}\n                                            emptyIcon={<i className=\"far fa-star\"></i>}\n                                            halfIcon={<i className=\"fa fa-star-half-alt\"></i>}\n                                            fullIcon={<i className=\"fa fa-star\"></i>}\n                                            activeColor=\"#98FB98\"\n                                        />\n                                        <RatingNumberStrong>{showRatingsDict[String(tvshow.id)]}</RatingNumberStrong>\n                                    </RatingDiv>\n                                </TDInfo>\n                            </TRow>\n                        )) : null}\n                    </TBody>\n                </Table>\n\n\n            </TvRatings>\n        </RatingsContainer>\n        \n    </RatingsScreenContainer>\n  )\n}\n\nexport default MyRatings","/Users/andrewyusuf/movie-rating-sideproject/src/pages/Messages.js",[],[],{"ruleId":"136","severity":1,"message":"137","line":173,"column":52,"nodeType":"138","messageId":"139","endLine":173,"endColumn":54},{"ruleId":"140","severity":1,"message":"141","line":195,"column":8,"nodeType":"142","endLine":195,"endColumn":10,"suggestions":"143"},{"ruleId":"144","severity":1,"message":"145","line":86,"column":13,"nodeType":"146","endLine":86,"endColumn":98},{"ruleId":"140","severity":1,"message":"147","line":62,"column":8,"nodeType":"142","endLine":62,"endColumn":10,"suggestions":"148"},{"ruleId":"149","severity":1,"message":"150","line":83,"column":26,"nodeType":"151","messageId":"152","endLine":83,"endColumn":41},{"ruleId":"149","severity":1,"message":"153","line":261,"column":12,"nodeType":"151","messageId":"152","endLine":261,"endColumn":20},{"ruleId":"149","severity":1,"message":"154","line":261,"column":22,"nodeType":"151","messageId":"152","endLine":261,"endColumn":31},{"ruleId":"140","severity":1,"message":"155","line":334,"column":8,"nodeType":"142","endLine":334,"endColumn":10,"suggestions":"156"},{"ruleId":"140","severity":1,"message":"157","line":326,"column":8,"nodeType":"142","endLine":326,"endColumn":10,"suggestions":"158"},{"ruleId":"149","severity":1,"message":"159","line":145,"column":19,"nodeType":"151","messageId":"152","endLine":145,"endColumn":29},{"ruleId":"136","severity":1,"message":"137","line":158,"column":42,"nodeType":"138","messageId":"139","endLine":158,"endColumn":44},{"ruleId":"149","severity":1,"message":"160","line":175,"column":19,"nodeType":"151","messageId":"152","endLine":175,"endColumn":22},{"ruleId":"136","severity":1,"message":"137","line":190,"column":40,"nodeType":"138","messageId":"139","endLine":190,"endColumn":42},"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'TRENDING_MOVIES_URL' and 'TRENDING_SHOWS_URL'. Either include them or remove the dependency array.","ArrayExpression",["161"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","React Hook useEffect has missing dependencies: 'user1' and 'user2'. Either include them or remove the dependency array.",["162"],"no-unused-vars","'setSearchParams' is assigned a value but never used.","Identifier","unusedVar","'register' is assigned a value but never used.","'getValues' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'MOVIE_DETAIL_URL' and 'movieId'. Either include them or remove the dependency array.",["163"],"React Hook useEffect has missing dependencies: 'TV_DETAIL_URL' and 'TvId'. Either include them or remove the dependency array.",["164"],"'subscriber' is assigned a value but never used.","'sub' is assigned a value but never used.",{"desc":"165","fix":"166"},{"desc":"167","fix":"168"},{"desc":"169","fix":"170"},{"desc":"171","fix":"172"},"Update the dependencies array to be: [TRENDING_MOVIES_URL, TRENDING_SHOWS_URL]",{"range":"173","text":"174"},"Update the dependencies array to be: [user1, user2]",{"range":"175","text":"176"},"Update the dependencies array to be: [MOVIE_DETAIL_URL, movieId]",{"range":"177","text":"178"},"Update the dependencies array to be: [TV_DETAIL_URL, TvId]",{"range":"179","text":"180"},[4527,4529],"[TRENDING_MOVIES_URL, TRENDING_SHOWS_URL]",[1303,1305],"[user1, user2]",[10558,10560],"[MOVIE_DETAIL_URL, movieId]",[10524,10526],"[TV_DETAIL_URL, TvId]"]